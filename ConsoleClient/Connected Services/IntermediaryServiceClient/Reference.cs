//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.IntermediaryServiceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IntermediaryServiceClient.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCities", ReplyAction="http://tempuri.org/IService1/GetCitiesResponse")]
        string[] GetCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCities", ReplyAction="http://tempuri.org/IService1/GetCitiesResponse")]
        System.Threading.Tasks.Task<string[]> GetCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStations", ReplyAction="http://tempuri.org/IService1/GetStationsResponse")]
        string[] GetStations(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStations", ReplyAction="http://tempuri.org/IService1/GetStationsResponse")]
        System.Threading.Tasks.Task<string[]> GetStationsAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDetails", ReplyAction="http://tempuri.org/IService1/GetDetailsResponse")]
        string[] GetDetails(string city, string station, bool refresh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDetails", ReplyAction="http://tempuri.org/IService1/GetDetailsResponse")]
        System.Threading.Tasks.Task<string[]> GetDetailsAsync(string city, string station, bool refresh);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ConsoleClient.IntermediaryServiceClient.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ConsoleClient.IntermediaryServiceClient.IService1>, ConsoleClient.IntermediaryServiceClient.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetCities() {
            return base.Channel.GetCities();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCitiesAsync() {
            return base.Channel.GetCitiesAsync();
        }
        
        public string[] GetStations(string city) {
            return base.Channel.GetStations(city);
        }
        
        public System.Threading.Tasks.Task<string[]> GetStationsAsync(string city) {
            return base.Channel.GetStationsAsync(city);
        }
        
        public string[] GetDetails(string city, string station, bool refresh) {
            return base.Channel.GetDetails(city, station, refresh);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDetailsAsync(string city, string station, bool refresh) {
            return base.Channel.GetDetailsAsync(city, station, refresh);
        }
    }
}
